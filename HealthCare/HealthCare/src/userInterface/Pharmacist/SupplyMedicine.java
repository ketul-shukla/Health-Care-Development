/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Pharmacist;

import business.Inventory.Medicine;
import business.Inventory.MedicineDirectory;
import business.UserAccount.UserAccount;
import business.WorkQueue.MedicineWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ketul
 */
public class SupplyMedicine extends javax.swing.JPanel {

    /**
     * Creates new form SupplyMedicine
     */
    JPanel rightJPanel;
    UserAccount userAccount;
    MedicineDirectory medicineDirectory;
    MedicineWorkRequest request;
    SupplyMedicine(JPanel container, UserAccount userAccount, MedicineDirectory medicineDirectory, MedicineWorkRequest request) {
          initComponents();
        this.rightJPanel=container;
        this.userAccount=userAccount;
        this.medicineDirectory= medicineDirectory;
        populateMedicineTable();
        this.request = request;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedicines = new javax.swing.JTable();
        btnSupplyMedicine = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicinesSupply = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();

        tblMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine", "Available Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMedicines);
        if (tblMedicines.getColumnModel().getColumnCount() > 0) {
            tblMedicines.getColumnModel().getColumn(0).setResizable(false);
            tblMedicines.getColumnModel().getColumn(1).setResizable(false);
        }

        btnSupplyMedicine.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnSupplyMedicine.setText("Supply Medicine");
        btnSupplyMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupplyMedicineActionPerformed(evt);
            }
        });

        tblMedicinesSupply.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMedicinesSupply);
        if (tblMedicinesSupply.getColumnModel().getColumnCount() > 0) {
            tblMedicinesSupply.getColumnModel().getColumn(0).setResizable(false);
            tblMedicinesSupply.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnAdd.setText("ADD>>");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSupplyMedicine)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(btnAdd)))
                .addGap(18, 18, 18)
                .addComponent(btnSupplyMedicine)
                .addContainerGap(194, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
      int selectedRow= tblMedicines.getSelectedRow();
      if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
      else
      {
      
      Medicine medicine= (Medicine) tblMedicines.getValueAt(selectedRow,0);
      
      
     
      DefaultTableModel model = (DefaultTableModel) tblMedicinesSupply.getModel();
       
        Object[] row= new Object[1];
           row[0]=medicine;
           model.addRow(row);
           populateMedicineTable();
      }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSupplyMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupplyMedicineActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) tblMedicines.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tblMedicinesSupply.getModel();
        int rowCount1 = model1.getRowCount();
        int rowCount2 = model2.getRowCount();
        for(int i = 0; i < rowCount2; i++)
        {
            int quantity = (int) model2.getValueAt(i,1);
            for(int j = 0; j < rowCount1; j++ )
            {
                if(model2.getValueAt(i,0 ) == model1.getValueAt(j, 0))
                {
                    Medicine medicine= (Medicine) tblMedicines.getValueAt(j,0);
                    medicine.setQuantity(medicine.getQuantity() - quantity);
                    break;
                }
            
            }
            
        }
        request.setComments("completed");
        request.setStatus("Completed");
        JOptionPane.showMessageDialog(null, "Medicine Request Successful");
        rightJPanel.remove(this);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.previous(rightJPanel);
        
        
    }//GEN-LAST:event_btnSupplyMedicineActionPerformed

     
     public void populateMedicineTable()
    {
         DefaultTableModel model = (DefaultTableModel) tblMedicines.getModel();
         
         model.setRowCount(0);
         for(Medicine medicine: medicineDirectory.getMedicineList())
         {
           Object[] row= new Object[2];
           row[0]=medicine;
           row[1]= medicine.getQuantity();
           model.addRow(row);
         }
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSupplyMedicine;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMedicines;
    private javax.swing.JTable tblMedicinesSupply;
    // End of variables declaration//GEN-END:variables
}
